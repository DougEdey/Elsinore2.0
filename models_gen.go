// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"fmt"
	"io"
	"strconv"
)

// The settings for hysteria mode
type HysteriaSettings struct {
	// Indicates if these settings have been configrued yet.
	Configured *bool `json:"configured"`
	// The ID of an object
	ID string `json:"id"`
	// When this temperature is hit, turn on the cooling output
	MaxTemp *float64 `json:"maxTemp"`
	// When this temperature is hit, turn on the heating output
	MinTemp *float64 `json:"minTemp"`
	// The minimum amount of time to turn the outputs on for.
	MinTime *int `json:"minTime"`
}

// The manual settings for this controller
type ManualSettings struct {
	// Indicates if these settings have been configrued yet.
	Configured *bool `json:"configured"`
	// The time for one duty cycle in seconds
	CycleTime *int `json:"cycleTime"`
	// The manual duty cycle percentage for this controller
	DutyCycle *int `json:"dutyCycle"`
	// The ID of an object
	ID string `json:"id"`
}

// The settings for heating or cooling on a temperature controller
type PIDSettings struct {
	// Indicates if these settings have been configured yet
	Configured *bool `json:"configured"`
	// The automatic cycle time in seconds
	CycleTime *int `json:"cycleTime"`
	// The minimum delay between turning an output on and off in seconds
	Delay *int `json:"delay"`
	// The differental calculation value
	Differential *float64 `json:"differential"`
	// The ID of an object
	ID string `json:"id"`
	// The integral calculation value
	Integral *float64 `json:"integral"`
	// The proportional calculation value
	Proportional *float64 `json:"proportional"`
}

type TemperatureController struct {
	// The PID calculated duty cycle, this can be overriden by the ManualDuty in manual mode
	CalculatedDuty *int `json:"calculatedDuty"`
	// The cooling settings for this controller
	CoolSettings *PIDSettings `json:"coolSettings"`
	// The percentage of time this controller is on
	DutyCycle *int `json:"dutyCycle"`
	// The heating settings for this controller
	HeatSettings *PIDSettings `json:"heatSettings"`
	// The hysteria mode settings for this controller
	HysteriaSettings *HysteriaSettings `json:"hysteriaSettings"`
	// The ID of an object
	ID string `json:"id"`
	// The manual settings for this controller
	ManualSettings *ManualSettings `json:"manualSettings"`
	// The controller mode
	Mode *ControllerMode `json:"mode"`
	// The assigned name of this controller
	Name *string `json:"name"`
	// The last time that the duty cycle was calculated
	PreviousCalculationTime *string `json:"previousCalculationTime"`
	// The target temperature when in auto mode
	SetPoint *float64 `json:"setPoint"`
	// The probes assigned to this controller
	TemperatureProbes []*TemperatureProbe `json:"temperatureProbes"`
}

// A device that reads a temperature
type TemperatureProbe struct {
	// The ID of an object
	ID string `json:"id"`
	// The physical address of this probe
	PhysAddr *string `json:"physAddr"`
	// The value of the reading
	Reading *string `json:"reading"`
}

// Used to configure a probe to a controller
type ProbeSettings struct {
	// The address of the probe to add to a controller
	Address *string `json:"address"`
	// The name of the controller to add the probe to.
	Name *string `json:"name"`
}

// The temperature controller mode
type ControllerMode string

const (
	// Use the manual settings
	ControllerModeManual ControllerMode = "manual"
	// This controller is off
	ControllerModeOff ControllerMode = "off"
	// Use the PID settings
	ControllerModeAuto ControllerMode = "auto"
	// Use the hysteria settings
	ControllerModeHysteria ControllerMode = "hysteria"
)

var AllControllerMode = []ControllerMode{
	ControllerModeManual,
	ControllerModeOff,
	ControllerModeAuto,
	ControllerModeHysteria,
}

func (e ControllerMode) IsValid() bool {
	switch e {
	case ControllerModeManual, ControllerModeOff, ControllerModeAuto, ControllerModeHysteria:
		return true
	}
	return false
}

func (e ControllerMode) String() string {
	return string(e)
}

func (e *ControllerMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ControllerMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ControllerMode", str)
	}
	return nil
}

func (e ControllerMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
